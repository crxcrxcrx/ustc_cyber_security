2 计算机系统的基本结构与工作原理

2.1 计算机系统的基本结构与组成
    \muArch
        micro Architecture
        微型架构
    ISA
        Instruction Set Architecture
        指令集架构
    CA
        Computer Architecture
        计算机体系结构
    CISC
        Complex Instruction Set Computer
        复杂指令集系统计算机
    RISC
        Reduced Instruction Set Computer
        精简指令集系统计算机
    CA
        广义上包括\miuArch(硬件)和ISA(软件)
        \muArch
            现在大多处理器对外是Von Noyman结构, 对内是Harvard结构
            Von Noyman(Princeton)结构
                数据指令放一起
            Harvard结构
                数据指令分离
        ISA
            与结构无关, 大多是Von Noyman结构但不能定势思维
            CISC
                复杂指令集
            RISC
                精简指令集
        设计师, 注重基本设计思想和逻辑结构
        程序员, 注重系统功能描述， 指令集和编程方法
    计算机组成 
        关注机器功能单元逻辑设计, 物理实现和部件间互联组织
    计算机实现
        更底层集成电路
    计算机层次模型
        最初阶段, 只有两层
            软件子层, 指令系统
            硬件子层, 逻辑电路
        第二阶段, 微程序设计与CISC
            新增微体系结构层, 新增在底二层
                CISC(微程序设计)类似于函数, 简化控制器硬件, 实现复杂操作
                微程序导致指令增加复杂功能, 后来微程序被称为CISC
                CISC器件数量增加, 功耗增大, 性能与电路规模不成比例
        第三阶段, RISC 
            新增硬核层, 新增在底两层
                处理器二八定律
                    80%时间运行的是总量不到20%的指令完成
                    80%任务是用的是总量不到%20的电路完成
                RISC为提高性能, 减少指令数量, 取消微程序
        第四阶段, OS
            新增OS, 新增在最高层
                第一个操作系统, OS360
        第五阶段, 编程语言
            新增用户程序层, 语言处理层, 新增在最高层
                硬件机器指令->符号汇编语言->面向过程->面向对象
    Von Noyman模型机系统
        以CPU为核心
        单总线系统
        指令和数据使用同一条总线
        
2.2 模型机存储器子系统
    PA
        Physical Address
        物理地址
    LE
        Little Endian
        小端格式
    BE 
        Big Endian
        大端格式
    按字节存储寻址, 1B=8bit
    对准存放
        根据计算机位数决定起始地址, x位机应该是x/8的倍数
        并不是必须的, 对准有助于一次总线操作完成寻址
    LE和BE
        LE是顺着来的顺序
        BE是逆着来的顺序
    存储器操作
        读
            指定存储单元内容读出并传入CPU中
            过程
                CPU通过AB和CB发送地址信号和读命令
                被选中单元的数据被读到DB上
                CPU采样数据并存入内部寄存器
        写
            CPU向指定存储单元传送数据并覆盖原有内容
            过程
                CPU通过AB, DB, 和CB发送地址信号, 数据和写命令
                DB上的数据被写到被选中单元上
        若连续数据读写, 可只需第一次读写时发送地址
    存储器分级
        存储器理想要求, 速度快容量大成本低
        很难, 有破解方法
            外存满足大容量低成本非易失
            内存是DRAM型兼顾容量速度成本
            高速缓存减少CPU对内存访问的开销
            寄存器可以直接在CPU内最快速

2.3 模型机CPU子系统
    ALU
        Arithmetic Logical Unit
        算术逻辑单元
    ACC
        ACCumulator
        累加器
    FR
        Flag Register
        标志寄存器
    IR
        Instruction Register
        指令寄存器
    ID
        Instruction Decoder
        指令译码器
    OC
        Operation Controller
        操作控制器
    PC
        Program Counter
        程序计数器
    CM 
        Control Memory
        控制存储器
    CU 
        Control Unit
        控制单元
    EU 
        Executive Unit
        执行单元
    运算器(计算中心)
        ALU
            是核心, 负责运算, 也是数据传送的一条重要途径
            由带进位的全加器, 移位寄存器以及相应的控制逻辑组成
            加法器是ALU的最主要部件, 所有二进制算术运算可通过加法和移位实现
        ACC
            特殊寄存器, 用于提供送入ALU的操作数, 存储ALU的结果
            早期CPU只有一个ACC
                因ACC和ALU密不可分, 所以常划归到运算器里, 不是寄存器组
            现代CPU有很多通用寄存器, 甚至所有通用寄存器都可以当作ACC
                因此ACC这个说法逐渐淡出江湖
        累加锁存器
            防止ALU输出经过ACC再反馈到ALU输入端
        暂存器
            暂时存放操作数, 但不存放计算结果 
            它是透明的, 程序员不可见
        FR
            分为状态位和控制位
            状态位记录ALU运算后状态和特征
            控制位对CPU某些行为进行控制管理
        PSR
            Program State Register
            程序状态寄存器
    控制器(控制中心)
        IR
            临时存放从内存或Cache取出来的下一条待执行指令
            其输出是ID输入
        ID
            计算机能且仅能执行指令
            指令由操作码和地址码两部分组成
            操作码表明操作内容
            地址吗表示操作对象的地址
            译码器只对操作码进行译码, 分析识别应该进行如何操作
        OC
            根据ID的译码结果产生控制信号发送到相关部件进行控制
            OC内部有时序脉冲发生器, 控制信号发生器, 启停电路和复位逻辑等
        PC
            有种观点包括PC, 还有一种观点认为PC是数据通道
            存放下一条待执行指令在内存的地址
            开机时引导程序第一条指令
            顺序执行时每条指令执行后自动修改
            遇到转移指令转移目标地址到PC
        微操作
            每条指令执行过程都可以分成一系列微操作
            可由简单电路实现, 可被多个指令复用
        微操作码
            每个微操作的编码
        执行顺序控制位
            指示后续微操作执行顺序
        微操作码+执行顺序控制位=微指令 
        指令是若干微指令编排而成的微程序
        控制器分类
            微程序控制器(CISC类)
                指令执行过程可看作多个微操作序贯执行完成
                微程序存在CM中
                执行时, 微指令从CM逐条取出, 微操作码译码产生微操作控制信号
                2.pdf/P31, 控制结构图
                工作原理
                    指令由操作码和地址码组成 
                    操作码经过ID译码
                        指令对应的微程序在CM的首地址
                    地址经过微地址译码器译码后从CM读出微指令
                        微操作码送往微操作码译码器
                        译码器生成的相应控制信号实现微操作
                    执行顺序控制位送往微地址形成电路
                        生成下一条微指令的微地址
                    不断重复上述过程
                特点
                    硬件电路简单, 可支持复杂指令, 速度慢
            硬连线控制器(RISC类)
                也称组合逻辑控制器, 最早的控制器设计方法
                把控制器看作专门产生固定时序控制信号的逻辑电路
                以元件少速度快为目标
                控制逻辑电路复杂, 规模庞大, 无法变更, 除非重新设计布线
                2.pdf/P34, 控制结构图
                工作原理
                    指令由操作码和地址码组成 
                    操作码经过ID译码
                        指令对应的一系列微操作以及其对应的微操作码
                    微操作控制信号发生器把译码结果结合状态寄存器决定操作
                    不断重复上述过程
                特点
                    硬件电路复杂, 不支持复杂指令, 改动困难, 元件少速度快
    寄存器阵列(寄存器组, 寄存器堆, 寄存器文件)
        是CPU内若干高速存储单元, 每个都有编号或名称, 根据编号或名称直接访问
        CPU与寄存器数据交换直接通过内部总线进行, 速度最快
        受指令长度限制, 寄存器数量有限, 只暂存CPU工作时所需少量数据和地址
        分类
            专用寄存器, 如PSR(FR), IR, PC等
            通用寄存器, 对ALU运算提供的存储区, 早期少通用性差, 现在改进
    地址与数据缓冲器
        CPU内部总线与系统总线接口
        提供地址和数据传送缓冲
        增加CPU系统总线驱动能力
    数据通道
        计算机各部件按功能分类
            CU, 控制器, 负责指令译码以及生成控制信号
            EU, 执行器, 负责生成地址, 读取传送数据, 计算等
        数据是运算器, 寄存器阵列和系统总线接口间通过内部总线进行传送的
        这三部分称为数据通道

2.4 模型机指令集和指令执行过程
    指令分类
        微指令
            微程序集命令
        机器指令, 简称指令!
            CPU能识别和执行的二进制码序列
            包括操作码和操作数
        宏指令  
            若干机器指令组成的软件指令
    指令系统, 一台计算机所有指令的集合
        ISA是狭义的计算机体系结构
    汇编指令
        助记符->操作码
        标号和符号->指令和操作数地址
    模型机指令集
        算术类
            加法ADD, 3
            减法SUB, 3
        逻辑类
            位与AND, 3
            位或OR, 3
            位非NOR, 2
        传送类
            存储器或者IO读LDR, 2
            存储器或者IO写STR, 2
            寄存器访问MOV, 2
        控制类 
            无条件转移JMP, 1
            条件转移JX/JNX, 1
            过程调用CALL, 1
            过程返回RET, 0
            停机HLT, 0
        CISC风格特点
            指令长度不一
            非Load/Store体系加载存储指令
            大多数两操作数
            指令功能强大, 程序简洁
            可以直接对内存寻址
        RISC风格特点
            定长指令
            Load/Store体系加载存储指令
            大多数三操作数
            一次取指操作读入一个完整指令
            对立即数大小或类型有要求
            对内存寻址无法在指令中直接给内存地址, 需要寄存器提供
        最终两者融合借鉴

2.5 计算机体系结构的改进
    WAW
        Write After Write
        写后写
    WAR 
        Write After Read 
        读后写
    BTB 
        Branch Target Buffer
        转移目标缓冲器
    AMP 
        Asymmetric Multi Processor
        非对称多处理器计算机
    SMP 
        Symmetric Multi Processor
        对称多处理器计算机
    SAN 
        Storage Area Network
        存储局域网
    模型及只能执行一条指令, 前后指令会多级串联, 出现"窝工"现象
    可以通过流水线技术解决问题
    在流水线上以时间重叠方式序贯执行
    需新增流水线寄存器 
    流水线问题
        资源问题
            多指令同时争用资源
            解决方法
                插入气泡或阻塞, 造成指令等待一个节拍再启动, 会造成性能下降
                采用Harvard结构, 解除取指和取操作数的资源相关
        数据问题
            后一条指令需要前一条指令结果
            WAW, WAR
            解决方法
                定向推送减少数据相关
                优化编译器, 编译时检查调整执行顺序
        控制问题
            转移指令会导致清空流水线, 造成断流, 效率下降
            两个流水线周期延迟是转移代价
            解决方法
                无条件转移指令译码阶段提前转移目标地址
                大多数条件转移指令也可以这样做
                少部分条件转移指令需要转移预测技术
                    动态打分表示可能性
    单条数据处理器
        标量处理器
            只能处理标量数据
        向量处理器
            一条指令完成一个向量计算, 用于科学计算和信号处理
    多条数据处理器
        超标量处理器
            拥有多条流水线, 空间并行提高处理器能力
            运行之前检查不同流水线指令不相干
        多发射处理器
            指令分发单元通过一个流水线周期内向多条流水线发射多条指令
    超线程处理器
        单处理器只能一个线程, 多线程只是OS的调度, 性能提高有限
        超线程处理器有两个逻辑上线程处理单元, 每个线程不独占全部资源
        需要OS, APP, BIOS的支持
        多任务性能提升, 单任务性能下降
    多核处理器
        可集成的电路越来越多, 多个功能完整CPU集成一个芯片上
        内核普遍采用超标量和多发射技术, 拥有全部资源
        内核不是多多益善, 有调度成本开销
        Amdahl 定律
            加速比S=1/(1-a+a/n)
            a是可并行代码比例
            n是节点数
        需要在核数功耗代价和实际效果间寻求平衡
        分成两类
            异构多核, 性能不同
            同构多核, 性能相同
    多处理器计算机 
        一个计算机有不同芯片上多个处理器
        并行工作, 共享内存和总线
        分成两类
            AMP, 处理器有主从之分
            SMP, 处理器地位相同
    多计算机系统
        多台计算机通过局域网互联
        每台计算机分别有独立系统和独立处理器
        通过LAN或SAN共享外存, 组成计算机集群
        提高计算能力, 减少单点故障影响
    分布式计算机系统
        多台计算机和集群通过互联网互联
        有全网统一的分布式OS进行统一调度保证系统一致性透明性
        用户无需关心系统资源和计算机差异
        计算机无主从之分, 合作协同自治
        云计算基础

2.6 Intel x86典型微处理器

2.7 ARM嵌入式处理器

2.8 计算机性能评测
    MIPS
        Million Instructions Per Second
    性能指标
        机器字长
        存储容量, 高速缓存和内存
        总线带宽和数据吞吐速率
    早期指标, MIPS
    现在指标, 基准测试结果