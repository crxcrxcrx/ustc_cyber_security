5 ARM处理器体系结构

5.1 ARM体系结构与ARM处理器概述
    TCM 
        Tightly Coupled Memory
        紧耦合内存
    SWI 
        SoftWare Interrupt
        软件中断
    FIQ 
        Fast Interrupt Request
        快速中断请求
    DSP 
        Digital Signal Processing
        数字信号处理
    MCU 
        MicroController Unit
        微控制单元
    VFP 
        Vector Float Processor
        矢量浮点处理器
    IEM 
        Intelligent Energy Management
        智能能量管理
    MMU 
        Memory Management Unit
        内存管理单元
    MPU 
        Memory Protection Unit
        内存保护单元
    ADC 
        Analog to Digital Converter
        模数转换
    DAC 
        Digital to Analog Converter
        数模转换
    PWM 
        Pulse width modulation
        脉宽调制
    RTC 
        Real Time Clock
        实时时钟
    BOD 
        Brown Out Detection
        掉电检测
    UART 
        Universal Asynchronous Receiver/Transmitter
        通用同步收发的串行接口
    ISA与\muArch
        ISA和\muArch相互独立
        ISA是软硬件之间的抽象层, 是软硬件之间的桥梁
            硬件部分是\muArch
            软件部分是固件, 编译器, OS, APP等
        ISA相同则软件兼容
        简化的Harvard结构
            现在大多处理器对外是Von Noyman结构, 对内是Harvard结构
                有些内部两套独立总线分别访问指令和数据
                有些内部分别配置指令和数据Cache或TCM, 但对外一套总线
        TCM
            用于存储必须快速执行的中断服务程序和实时任务处理程序
            性能与Cache相当, 常和处理器集成在一起
            有些重要数据不适合存储在Cache里, 也可以存到TCM中, 如中断向量表和堆栈
            和Cache的区别
                TCM有物理地址, 需要占用内存空间, 无Cache的不可预测性
    ARM处理器体系结构简介
        Intel, 是全球最大的个人计算机零件和CPU制造商
        MIPS, 源自Standford大学的项目, 最终商业化, 后来被收购
        ARM, 源自Cambridge大学的项目, 后来A, R, M三人联合
            V1, 对应ARM1
                32位
                地址总线只有26条, 寻址空间64MB
                只提供基本指令(甚至没有乘法指令)
                    基本数据处理指令
                    数据存取指令
                    控制转移指令(链接指令)
                    软件中断指令SWI
                同期Intel 80386
                    需配合协处理器80387辅助浮点运算使用
            V2, 对应ARM2, ARM2as, ARM3
                在V1基础上ISA新增
                    乘法运算和乘加运算指令
                    若干协处理器操作指令
                    存储器和寄存器数据交换的SWP指令
                    快速中断模式FIQ, 比普通IRQ中断优先级高
                有V2a子版本
            V3, 对应ARM6, ARM7
                在V2基础上ISA新增
                    内存寻址空间扩展到4GB(对32位系统是极限了)
                    增加了Cache
                    乘法运算和乘加运算扩展到32位
                    增加了新的寄存器CPSR和SPSR用于保存程序执行状态
                    增加了访问CPSR等特殊寄存器的MRS和MSR指令
                    增加了从异常处理返回指令的功能
                在V2基础上\muArch新增
                    新定义abort和undefined两种异常和相应的工作模式
                同期Intel 80486
                    内置浮点运算单元
            V4, 对应ARM8, StrongARM
                是ARM体系的一个里程碑!
                在V3基础上ISA新增
                    引入16位Thumb指令集
                        是ARM指令集常用指令重新编码压缩后的子集
                        执行时被实时透明解压成32位指令
                    增加系统模式, 可以在用户态下的寄存器运行具有特权级别的系统任务
                    完善SWI软件中断
                    增加无符号字节和半字数据的加载和存储指令
                    增加有符号字节和半字数据的加载和存储指令 
                    把没有使用的指令空间作为未定义指令, 在UND异常对其处理
                在V3基础上\muArc新增
                    采用三级流水线方式
                        Fetch->Decode->Execute
                有V4t子版本, 对应ARM7t, ARM9t
            V5, 对应ARM7ej, ARM9e, ARM10
                在V4基础上ISA新增
                    增加了DSP指令, 为协处理器提供更多可选指令
                    Cache从V3的单一模式变成了指令和数据的Cache分离
                    更严格定义乘法指令对条件标志位影响
                    增加支持有符号数的加减饱和运算指令(溢出后取最值)
                    BLX指令, 将可返回转移指令和状态二合一
                    CLZ指令, 计算寄存器操作数前导0个数
                        提高归一化运算, 浮点运算, 整数除法运算的性能
                        也可使中断优先级排队操作更有效
                    BRK指令, 软件断点指令
                在V4基础上\muArch方面新增
                    流水线从V4的三级变成了五级
                        Fetch->Decode->Execute->DMA->register write back
                    DSP, 是标配
                    矢量浮点处理器, 选配
                    Java硬件加速器, 可以直接运行Java虚拟字节码程序
                    带有AHB或AHB-Lite的中线接口
                    引入TCM或TCM接口
                    后缀可加T, 表示支持Thumb指令
                    后缀可加E, 表示支持增强的DSP指令和Java硬件加速技术
            V6, 对应ARM11, CortexM0, CortexM1
                是ARM体系的另一个里程碑!
                在V5基础上ISA新增
                    引入Thumb2指令集, 可混合执行ARM和Thumb指令, 兼具两者优点
                    新增SIMD指令, 处理多媒体信号加速
                    支持混合大小端和非对准存储访问
                    采用了TrustZone安全解决方案, 不同代码根据可不可信任区划分权限
                在V5基础上\muArc新增
                    流水线增到八九级, 动态和静态组合的转移预测
                    内核, Cache, 协处理器间数据通路扩充到64位
                        每周期可读两条指令或存放两个连续的字数据
                    增加了增强型DSP和用于功耗管理的IEM, 性能功耗有突破
            V7, 对应CortexA, CortexR, CortexM
                是ARM体系的分水岭!
                在V5基础上\muArc新增
                    全面支持Thumb2技术, 无需来回切换ARM指令集和Thumb指令集
                    引入NEON的多媒体处理引擎, 支持128位SIMD扩展, 迎合3D图形
                    处理器与以往版本区别较大, 且仍保持较好的向下兼容
                        工作状态
                        操作模式
                        寄存器组织
                        异常和中断管理
                        对OS的支持
                此版本后开始分成三类
                    Application, 高性能
                    Real, 实时处理
                    Microcontroller, MCU
            V8
                首款支持64位指令集的处理器架构(CortexA)
    ARM处理器主要产品系列简介
        处理器特点
            固定长度操作码, 简化指令译码, 便于流水线设计
            多个通用寄存器, 可实现寄存器组均匀访问
            操作数地址由寄存器内容或指令码位域决定, 由地址自动增减寻址模式
            每条数据处理指令都可对ALU和移位器控制, 实现硬件最大利用
            多寄存器加载和存储指令, 实现大数据吞吐量
            所有指令都可条件执行, 提高代码执行速度
            支持Thumb指令集, 提高代码密度
        处理器层级
            ARM内核->ARM处理器->MCU或SOC->嵌入式系统
            ARM内核 
                必备部件
                    CPU, V4t后采用流水线技术和转移预测
                    总线互连矩阵, 提供多种数据并行传送能力
                    中断管理部件, 提供周期确定的低时延中断响应
                    系统定时器, 多任务操作系统必不可少的部件
                可选部件
                    指令和数据的Cache或TCM
                    MMU或MPU
                    数据/指令跟踪单元(debug用)
                    浮点单元
                    Java硬件加速器
                    多媒体处理部件
            ARM处理器 
                在ARM内核基础上, 通过系统总线连接
                    指令存储器, 一般是flash
                    数据存储器, 一般是SRAM
                    协处理器或协处理器接口部件
                    扩展RAM控制器, 扩展存储器不能通过系统总线直接相连, 需通过扩展接口
                    外设总线桥接器
                    部分调试跟踪组件
                在ARM内核基础上, 通过设备总线连接
                    调试访问接口
                    内核私有外设
            MCU或SOC 
                以ARM处理器为核心, 连接
                    扩展存储器
                    DMAC 
                    ADC, DAC
                    脉宽调制PWM
                    实时时钟RTC
                    电源监测BOD
                    串行接口UART
        ARM7简介
            V3
            MMU功能
                内存分区域访问权限管理
                内存分页管理
                虚拟地址到物理地址转换
                适合多用户系统
            MPU功能
                内存分区域访问权限管理
                适合对处理时间有明确要求的实时系统
        ARM9简介
            V5的
            新增TCM, 与Cache相当, 可寻址访问
        ARM11简介
            V6的
            虽然仍属于单发射标量流水线, 但流水线后几级可以并行
            算是一种分叉或分支结构流水线
            在性能功耗芯片面积以及成本上均衡, 支持休眠待机和关机模式
        CortexA简介
            V7的
            适用于移动计算, 智能手机, 企业网, 服务器等
            时钟频率超过1GHz
            内置浮点运算VFP
            内置多媒体数据处理NEON
            支持可伸缩异构或同构多核高性能处理器
            支持Android, Linux, Windows等OS
            可使用big-little技术, 根据负载高低选择不同功耗内核
            可使用DynamIQ技术, 是big-little技术升级版
            可使用超标量流水线技术
        CortexR简介
            V7的
            适用于手机基带调制解调器, 硬盘驱动器, 工业控制装置等
            为保证实时性, 采用指令和数据分离的Harvard结构
            高性能实时应用, 高性能, 低延时, 高可靠, 可信赖, 安全性, 容错性
            时间确定性
                硬性处理截止时间要求
            行为确定性
                不许出现因处理器或数据错误导致的误操作, 软硬件须具备一定容错能力
            内置指令Cache和数据Cache
            内置TCM存储器
            内置硬件除法器
            内置MPU, 但是没有MMU
            内置FPU
            内置内存和中断控制器
            支持多处理器锁步技术, 时间上严格同步执行相同指令
                双处理器若不一致则故障静默
                多处理器若不一致则硬件表决判断, 并屏蔽故障处理器, 实现故障恢复
            支持ECC和奇偶校验, 可进行纠错或检错
        CortexM简介
            V7的 
            适用于一般的嵌入式系统
            低成本低功耗高性能应用领域, 性能, 可靠性和实时性不如A和R系列

5.2 Cortex-M3/M4处理器结构
    NVIC 
        Nested Vectored Interrupt Controller
        嵌套向量中断控制器
    MSP 
        Main Stack Pointer
        主栈指针
    PSP 
        Process Stack Pointer
        进程栈指针
    MAC 
        Multiply Accumulate
        累积乘加运算
    NMI 
        Non Maskable Interrupt
        不可屏蔽中断
    CPACR 
        CoProcessor Access Control Register
        协处理器访问控制寄存器
    WIC     
        Wakeup Interrupt controller
        唤醒中断控制器
    PMU 
        Power Management Unit
        电源管理单元
    ETM 
        Embedded Trace Macrocell
        嵌入式跟踪宏单元
    ITM
        Instrumentation Trace Macrocell
        指令跟踪宏单元
    DWT
        Data Watchpoint and Trace
        数据观察点和跟踪单元
    FPB
        Flash Patch and Breakpoint
        Flash地址重载和断点单元
    TPIU
        Trace Port Interface Unit
        跟踪端口接口单元
    AP 
        Access Port 
        调试访问接口
    DP 
        Debug Port 
        外部调试端口
    DAP 
        Debug Access Port 
        调试访问端口
    SCS 
        System Control Space
        系统控制区
    PPB 
        Private Peripheral Bus
        外部私有总线
    CMSIS 
        Cortex Microcontroller Software Interface Standard
        微控制器软件接口标准
    CortexM3/M4处理器主要特性及其指令集架构
        基于V7架构
        三级流水线
        指令与数据分离的Harvard结构
        主要特性
            32位处理器, 可处理8/16/32位数据
            本身不包含存储器, 但提供多条连接不同存储器的总线接口
            紧耦合的NVIC, 能以确定周期快速响应中断
            可选配多种调试器
            可选配MPU分区保护内存
            低功耗低成本
            丰富的开发调试工具
            没有Cache, 没有TCM, 没有协处理器接口, 不支持虚拟地址(没有MMU)
            Systick
                系统节拍定时器, 可视作NVIC的一部分, 用于提供周期性定时中断
            双堆栈指针
                OS和应用任务使用不同堆栈
                主栈指针MSP, OS和中断处理使用
                进程栈指针PSP, 用户程序使用
            特权和非特权访问等级
                限制非特权等级访问某些寄存器, 提升系统安全性
                与MPU配合, 限制非特权访问某些内存区域, 防止破坏OS或其他任务数据
                即使用户程序出现问题也不会影响其他任务
            M4新增DSP扩展
            M4可选配单精度FPU 
                M3也有几条MAC指令进行浮点乘加运算, 但是并不是单周期的
    CortexM3/M4处理器结构
        可分成三个层级
            内核
                CPU
                    32位处理器, 取指译码执行三级流水线
                    Harvard结构, 指令数据两条线
                    三个关键部件
                        ALU, 控制单元CU, 寄存器阵列
                NVIC
                    与CPU紧耦合
                    可对大多数系统异常, 所有外部中断以及一个NMI全面管理
                Systick
                    简单的倒计时计数器, 负责产生系统定时异常
                可选配指令跟踪接口  
                    可用于debug
                M4内核可选配FPU
                    依照IEEE754标准
                    支持单精度浮点
                    不支持双精度浮点, 浮点余数, 二进制十进制转换运算
                    如需要, 只能另编程序
                    被看成协处理器, 并通过协处理器访问控制寄存器CPACR进行管控
            处理器
                AHB总线交换矩阵
                    基于AHB总线协议的交换网络
                    通过总线矩阵, M3/M4堆存储器, 片上和片外设备, 调试组件提供总线
                    数据和指令可在不同总线上并行传送
                    总线矩阵包含一个写缓冲区, 加快存储器写操作速度
                    系统总线基于AHB-Lite协议, 仅一个主机, 无需仲裁
                可选配MPU 
                    最多把存储空间分成8各区域, 区域间可重叠
                    各个区域存储特性和访问权限可通过编程定义
                    若使用嵌入式OS, 则MPU由OS管理
                    若没有嵌入式OS, 则可通过MPU设定需保护的内容
            处理器系统
                WIC唤醒中断控制器
                    为减少功耗, M系列处理器引入睡眠和深度睡眠模式
                        睡眠模式关闭大部分模块部件时钟
                        深度睡眠模式系统时钟, Systick也关闭, 内核, NVIC大部分电路也掉电
                    为使处理器掉电后能通过NVIC检测中断信号醒来, 引入WIC
                    深度睡眠时, WIC使能
                    若出现NMI或未被屏蔽的IRQ时, WIC触发PMU唤醒系统
                调试组件
                    对经典处理器调试组件整合, 定义了CoreSight调试架构
                    调试组件内容
                        ITM, 指令跟踪宏单元
                        DWT, 数据观察点和跟踪单元
                        FPB, Flash地址重载和断点单元
                        ETM, 嵌入式跟踪宏单元
                        TPIU, 跟踪端口接口单元
                        ROM, 存放调试组件配置信息
                    工作原理
                        由ETM和ITM产生调试信息, 再由TPIU输出, 在电脑中用软件分析
                    NVIC也参与调试过程, 有一些调试用的寄存器
                        可通过这些调试的寄存器进行停机和单步执行控制
                    CoreSight定义了内部调试访问接口AP, 与外部调试端口DP
                        两者合称DAP
    存储器管理
        没有Cache或TCM
        通过多条总线连接片上各种不同类型和容量的存储器
        如需对存储器扩容, 可通过存储器接口控制器连接片外大容量存储器
        存储器管理方面特性
            4GB地址空间, 被分成多个区域用于不同存储器和外设
            支持小端和大端, 但是制造商只能选择一种类型
            内置写缓冲提高程序执行速度
            可选位带操作, 也称位段或位域
                也就是以bit而不是byte进行读写操作
            可选MPU, 支持8个可编程区域, 提高系统健壮性
            支持非对准(非对齐)传送, 但是将增加总线传送次数
        存储器映射
            CODE区, 0.5GB
                只能被I-Code和D-Code总线访问
                为使两总线能同时访问, 可使用两个独立的存储器
                最低端部分使用flash存储程序代码
                另一部分是用SRAM存储重要数据
                I-Code和D-Code总线能访问CODE区所有空间
                只要不是同时访问同一个存储器, 两总线可同时传数据
                但为降低成本, 许多SOC芯片没有在CODE区部署SRAM
            SRAM区, 0.5GB
                片上主存储区, 存放数据
                由AHB-Lite系统总线管理
                许多芯片制造商只使用SRAM区存放数据
            外设区, 1.5GB
                片上外设连接AHB-Lite系统总线, 0.5GB
                片外设备连接APB总线, 与AHB-Lite总线有一个总线桥, 1GB
            外部RAM区, 1GB
                通过RAM控制器连接片外扩展, 可使用类型取决于RAM控制器
            内核私有区, 0.5GB
                内部私有外设
                    调试组件
                        ITM
                        DWT 
                        FPB 
                    系统控制区
                        SCS
                外部私有外设
                    调试组件
                        ETM 
                        TPIU 
                        ROM
                    外部PPB
                        由于内核私有区域需要特权访问权限, PPB总线一般专用连接调试组件
                        不用于普通外设, 防止出现特权管理错误
                芯片厂商定义区
                    因不同厂商不同芯片而异
    总线系统
        内核内部通过内部总线互连矩阵直接访问内核私有外设, 不通过总线系统
        核心
            CODE区
            基于AHB-Lite的32位总线协议
            I-Code总线, 取指操作, 对于16位Thumb指令, 可取两条
            D-Code总线, 取数据操作
            两者彼此独立, 但是之间有一个仲裁器
                同时访问同一区域, D-Code优先
        系统总线AHB
            SRAM区, 外设区, 外部RAM区, 芯片厂商定义区
            基于AHB-Lite的32位总线协议
        外设总线APB/PPB
            外部PPB总线区
            基于APB的32位总线协议
            用于debug等操作
    调试访问端口DAP
        基于增强型APB, 即AHB-AP的32位总线
        用于连接调试部分端口
    异常与中断处理
        嵌套向量中断控制器NVIC
            管理内容
                若干外部中断
                一个不可屏蔽中断
                多个系统异常
            是内核不可分割的一部分
        支持的异常和中断处理
            固定优先级的编号
                0, 无异常
                1, RST, 优先级-3
                    复位信号, 优先级最高
                2, NMI, 优先级-2
                    来自NMI引脚, 一般由看门狗或掉电检测单元BOD产生
                3, HardFault, 优先级-1
                    硬件错误, 异常处理未使能则触发
            可编程优先级的编号
                4, 存储器错误
                    访问内存违反MPU规则
                5, 总线错误
                    AHB错误相应
                6, 用法错误
                    无效指令或访问未配置部件
                7-10, 保留段
                11, SVC
                    有OS时, APP借此调用系统服务
                12, debug监视
                    基于软件调试时, 断电和数据观察点等调试事件的异常
                13, 保留段
                14, PendSV
                    可挂起的SVC, 用于OS的上下文切换
                15, Systick
                    系统节拍定时器周期异常, 用于定时切换
                16-255, IRQ0-240
                    由片上外设或外设中断源产生
                对于CMSIS的终端编号, 从-15开始到239
        配置NVIC后
            除RST外的所有中断都可屏蔽
            除RST, NMI, HardFault外的所有异常都可单独使能或禁止
            除RST, NMI, HardFault外的所有异常都可配备比前三者低的优先级
            支持优先级动态修改
            中断向量表可定位在存储器其他区域, 即支持重定位
            低中断处理延迟
        处理方式
            中断响应时, 直接计算中断类型号*4, 就是中断向量在中断向量表中地址
            中断响应时, I-Code总线取指, D-Code或系统总线同时压栈
            中断向量表由I-Code管理
            压栈操作可通过D-Code或系统总线管理, 但为简化CODE区SRAM, 只能系统总线完成
        系统节拍定时器Systick
            内部一个24位递减计数器和四个寄存器
                状态控制寄存器STCSR
                加载之寄存器STRVR
                当前计数值寄存器STCVR
                校准值寄存器STCR
            使能后, 从STCVR开始递减, 减到0产生异常, 再重复该过程

5.3 Cortex-M3/M4编程模型
    编程模型
    操作状态与操作模式

5.4 Cortex-M处理器存储系统

5.5 Cortex-M处理器的异常处理