1 软件安全概述
    软件
        定义                                    !!!
            IEEE
                计算机程序, 方法, 规则相关文档以及在计算机上运行所需的数据
            国标
                与计算机系统操作有关的计算机程序, 规程, 规则以及可能有的文件为文档与数据
        三要素PDF
            程序, 数据, 文档
        分类                                  !!!
            功能
                系统软件
                应用软件
                支撑软件
            规模
                微型软件
                小型软件
                中型软件
                大型软件
                甚大型软件
                极大型软件
            工作方式
                实时处理软件
                分时软件
                交互式软件
                批处理软件
            服务对象范围
                面向部分客户的项目软件
                面向市场的产品软件
            运行平台
                服务器端软件
                PC端软件
                手机应用软件
                嵌入式软件
            授权方式
                专属软件
                    一般收费, 而且需要权限
                自由软件
                    允许所有权限
                共享软件
                    试用版有限制需要购买
                免费软件
                    可获得, 但没有源码
                公共软件
                    作者无从考究或没有著作权
        开源授权方式
            GPL
                全免费, 新软件要遵守GPL
            BSD
                全免费, 新软件可商用可保留权限
            MPL
                全免费, 新软件归发起者
    软件安全 
        是软件在受到恶意攻击情形下仍能继续正确运行的工程化软件思想
        三个支柱                          !!!
            应用风险管理
                贯穿整个软件生命周期
            接触点
                保障软件安全的最优方法
            知识
                收集压缩共享用于软件安全方法提供坚实基础的安全知识
        七个接触点                                !!!
            代码审核
                代码
            体系结构风险分析
                设计和说明书
            渗透测试
                处于环境中的系统
            基于风险的安全测试
                单元和系统
            滥用案例
                需求和使用案例
            安全需求
                需求
            安全操作
                实际部署的软件

2 安全的软件开发生命周期
    软件过程
        主要过程
            获取过程
            供应过程
            开发过程
            运行过程
            维护过程
        支持过程
            文档编制过程
            配置管理过程
            质量保证过程
            验证过程
            确认过程
            联合评审过程
            审核过程
            问题解决过程
        组织过程
            管理过程
            基础设施过程
            改进过程
            培训过程
    配置管理                                    !!!
        含义
            通过技术或行政手段对软件产品及其开发过程和生命周期进行控制, 规范的一系列措施
        主要功能
            并行开发支持
            修订版管理
            版本控制
            建立管理
            过程控制
            代码共享
        工具
            Git
            SubVerSion
            CVS
            VSS
    软件概要设计                                !!!!!
        五大视图
            逻辑视图
                系统静态抽象结构
            运行视图
                动态处理联系
            开发视图
                研发过程第三方与程序包
            数据视图
                数据库实体关系图
            部署试图
                系统与部署环境关系
    三个模型
        瀑布模型
            可行性研究
            需求分析
            软件设计 
            编程
            测试
            运维
        V模型
            需求分析
            概要设计
            详细设计
            编程
            单元测试
            集成测试
            系统测试
            验收测试
        W模型
            在V模型基础上新增逐步测试
            测试与开发并行
    软件能力成熟度模型CMM                            !!!!!
        用于软件过程改进
        分级
            基本级
            重复级
            确定级
            管理级
            优化级
        最新版本是CMMI分级
            初始级
            管理级
            定义级
            量化管理级
            优化级
    威胁建模
        考虑安全目标和安全隐患以及易攻击点
        STRIDE威胁建模
            攻击者角度分的攻击
                Spooling
                    认证, 仿冒
                Tampering
                    完整性, 篡改
                Repudiation
                    审计, 抵赖
                Information Disclosure
                    保密性, 信息泄露
                DoS
                    可用性, 拒绝服务
                Elevation of privilege
                    授权管理, 权限提升
        数据流图
            PPT215

3 缓冲区溢出
    缓冲区溢出                                       !!!!!
        栈溢出
            向缓冲区写入超长内容使得缓冲区溢出
            数组越界或指针非法使用
            进程地址空间的恶意代码被跳转执行
        堆溢出
            划分成连续块是否标记被使用
                U是F否, 最高TOP
            U结构
                上一块长度
                当前块长度
                数据空间(用户使用区)
            F块结构
                上一块长度
                当前块长度, M标志是否mmap()分配, P标志是否上一块被使用
                前指针fd, 指向下一块
                后指针bk, 指向上一块
                数据空间(未使用空间)
            Bin链表删除会有unlink操作涉及读写, 可控制fd和bk指针达到修改任意内容到任意内存地址
        整数溢出
            利用大整数溢出规定内存
        格式化字符串溢出
            可以输出栈中数据
            可以使程序崩溃
            可以访问任意位置内存
            可以改写任意位置内存
    布局
        进程内存布局
            栈 
            (向下)

            (向上)
            堆
            未初始化全局变量段
            数据段
            文本段
        栈帧布局
            参数, 反序压栈
            返回值地址
            前帧指针
            局部变量
            (向下)
        帧指针
            BASE指针
                栈底, 不会变动
                对应EBP
                CPU用EBP寄存器访问栈帧内容
            TOP
                栈顶, 动态变化
                对应ESP
                运行过程中ESP随时变化
    相关攻击术语
        0day漏洞
            零时差攻击
            被发现后立即利用
        APT攻击                             !!!!!
            多种攻击向量进行攻击
            长时间重复操作, 适应防御者, 维持在所需互动水平
            总之就是长期窃取数据
            攻击阶段
                情报收集
                首次突破
                幕后操纵通讯
                横向移动
                资料发掘
                资料外传

4 安全编程
    CERT安全编码建议
        针对安全策略的架构设计
        留意编译器警告
        验证输入
        保持简单性
        默认拒绝
        最小权限原则
        清洁发送给其他系统数据
        纵深防御
        有效质保技术
        安全编码标准
    常见缓冲区溢出危险函数
        strcpy
        strncpy
        sprintf
        gets
        strcat
        memcpy
        scanf
        重载运算符 >>
    安全编程指南
        程序安全
            安全功能实现
            代码实现安全
            资源使用安全
        环境安全
    匈牙利命名法
        <小写字母>_<类型>
        小写字母
            g全局
            m类
            s静态
            c常量
        类型
            b布尔
            sz零结束字符串
            p指针
            n整数
            w字
            dw双字
            u无符号
            fn函数
    代码审核工具
        源代码
            BOON
            Cqual
            xg++
            EauClaire
            MOPS
            Splint
            BEAM
            Airac5
        二进制代码
            LogiScan
            BugScan
            Inspector
            SecurityReview
            BinAudit

5 软件保护
    加壳与脱壳
        加壳
            用专门的工具或方法, 在应用程序中加入一段如同保护层的代码, 使原程序代码失去本来的面目, 从而防止程序被非法修改和编译
            先执行外壳程序
            程序先执行外壳程序解开外壳再执行主程序
            目的                                  !!!!!
                保护程序
                压缩程序
        脱壳
            用于反加壳技术, 解除保护限制和干扰信息
    软件狗                                   !!!!!
        硬件加密锁
    常用软件保护技术
        防拷贝
            硬件防拷贝
                相关保密系统固化在硬件只读存储器上
                磁盘防拷贝
                    异常ID参数导致正常ID读写错误
                额外磁道
                    DOS系统只用前40磁道, 我们可以存到40/48-42/48磁道中防止DOS拷贝
                未格式化扇区和磁道法
                    故意少格式化扇区可以防止DOS拷贝程序
                弱位技术
                    把信息内容比1弱比0强混淆其他软件读写
                宽磁道技术
                    宽磁道无法被普通磁头读取信息
                CRC错误法
                    人为生成错误校验码
            软件防拷贝
                对加密盘进行特殊方法建立非正常格式
                在线方式服务器认证
                网络狗技术
            软硬件结合
                计算机硬件加密, 如激光加密, 掩膜加密, 针孔加密
                硬件验证是否是特定硬件
                也可以用磁盘CPU网卡序列号进行软件加密
                加密卡, 硬件固化软件检测
        反跟踪
            重要程序段不可跳过和修改
            不通过加密系统的译码算法, 密码不可破译
            加密系统不可动态跟踪执行
            静态跟踪
                反汇编把程序转化成汇编程序
            防静态跟踪
                将关键代码变形, 反汇编不知所云
                程序放在隐蔽位置
                程序代码进行变换
            反防静态跟踪, 动态跟踪
                动态跟踪方法
                后续模块需要前面模块的运行结果
            防动态跟踪
                使动态跟踪难以进行
                抑制跟踪中断
                封锁键盘输入
                设置显示器显示内容
                破坏中断向量表
                主动检测跟踪
                    检测加密系统是否被跟踪
                    检测被跟踪后进行处理
                    定时检测, 计时
                    偶尔检测, 满足时间条件检测
                    时钟中断, 检查前台任务执行
                    检测PSP前缀
                    中断地址检测
                设置堆栈指针
                    堆栈指针放在ROM来防止保存数据
                    堆栈指针放在程序段中调试会破坏源码
                    堆栈指针放在中断向量表内破坏入口地址
                    堆栈指针移作他用
                代码加密
                    程序经过分组加密
                    校验程序段
                    迷惑拖垮解密
                    指令流队列
                    逆指令流
            混合编程法
            自编软中断
            内存翻卷

6 恶意代码
    恶意软件分类
        依赖主机程序
            后门
                远程连接系统的工具
            木马
                依赖宿主程序, 不进行复制传播
                窃取数据信息
            逻辑炸弹
                编程写入恶意功能
                一定条件下出现
            病毒
                寄生在宿主文件, 自行复制
                可以有木马作为载荷
        独立主机程序
            蠕虫
                没有宿主文件, 自行复制
            细菌
                不能感染宿主的病毒
            拒绝服务程序
            垃圾邮件发送程序
                各种垃圾邮件发送
    判断病毒蠕虫木马                       !!!!!
        不恶意
            返回常规程序
        不复制 
            返回木马
        不感染宿主 
            返回蠕虫
        返回病毒
    病毒特征                                   !!!
        主动攻击
        针对特定环境
        衍生各种变种
        寄生宿主程序
        不可预见, 防病毒滞后于病毒产生
        诱惑欺骗用户触发感染
        持久伤害, 用户难以恢复
    病毒逻辑结构                            !!!!!
        感染标志
            并不是所有病毒都有
            病毒签名
        引导模块
            检查运行环境
            病毒引入内存
            设置激活和触发条件
        感染模块
            寻找感染目标
            检查目标是否满足条件
            决定是否感染
        破坏表现模块
            实现破坏
    蠕虫实体结构
        未编译源代码
            程序参数需要具体情况而定
        已编译链接模块
            不同系统需要的不同库
        可运行代码
            蠕虫主体
        脚本
            充分利用系统shell 
        受感染系统上的可执行程序
            可以被蠕虫利用的非自身部分
        信息数据
            已破解口令, 攻击地址列表, 蠕虫自身
    蠕虫功能结构
        基本功能模块
            扫描搜索模块
                寻找任意机器
            攻击模块
                建立传输通道
            传输模块
                计算机之间复制蠕虫
            信息搜集模块
                搜寻与建立被传染计算机信息
            繁殖模块
                建立自身副本
        扩展功能模块
            通信模块
                蠕虫之间以及与黑客之间交流
            隐藏模块
                隐藏蠕虫
            破坏模块
                破坏系统, 留后门等
            控制模块
                调整蠕虫行为
    木马结构
        木马程序
            驻留受害者系统中进行破坏计算机
        配置程序
            配置木马运行方式
        控制程序
            控制木马的程序
    僵尸网络Botnet                            !!!!!
        大量主机感染bot程序
        一对多控制网络
    移动目标防御MTD
        动态网络
        动态平台
        动态运行环境
        动态软件
        动态数据
    拟态防御CMD
        防御成本高
        时空动态表现
            内部架构
            冗余资源
            运行机制
            核心算法
            异常表现

7 Web软件漏洞
    常见漏洞                                  !!!!!
        注入
        失效身份认证
        敏感数据泄露
        XML外部实体
        失效访问控制
        安全配置错误
        XSS跨站脚本
        不安全的反序列化
        使用已知含有漏洞的组件
        不足的日志记录和监控
    SQL注入                                    !!!!!
        SQL命令插入查询字符串
        防范
            过滤字符串
    XSS跨站脚本攻击
        迫使Web站点回显可执行代码
        涉及三方, 攻击者, 被利用网站, 受害者客户端
        反射型, 基于DOM型, 存储型
        防范
            编码用户输入数据
            过滤字符串
    CSRF跨站请求伪造
        挟持终端在当前已登录web程序执行非本意操作
        防范
            用户
                登陆用立即退出
                不保存浏览器用户口令
                不要同时用同一个浏览器浏览不同敏感级别信息
            开发者
                用临时授权
                non-Get请求使用安全token
                不滥用$_REQUEST类变量
    SSRF服务器端请求伪造
        攻击者构造请求服务端发起请求
        信息泄露漏洞
        防范
            过滤返回信息
            统一错误信息
            限制请求端口
            黑名单内网IP
            禁止不需要的协议

8 渗透测试
    渗透测试概念                              !!!!!
        模拟攻击者攻击目标系统 
    PTES渗透测试七步                         !!!!!
        前期交互
            交互讨论范围目标限制条件等
        情报收集
            收集相关系统信息
        威胁建模
            分析可利用攻击方式
        漏洞分析
            根据攻击方式确定漏洞
        渗透攻击
            普遍进行攻击
        后渗透攻击
            自主进行攻击
        报告
            进行反馈报告内容
    常见渗透测试工具
        KaliLinux
        Metasploit

9 软件测试概述
    软件缺陷                              !!!!!
        软件产品存在的问题
        表现为不能实现用户需求
    软件漏洞                               !!!!!
        硬件软件协议的安全性缺陷
        表现在可被利用攻击系统
    软件测试                           !!!!!
        人工或自动手段测试系统来测试是否满足用户需求, 寻找故障, 发现缺陷与漏洞
    测试过程                             !!!
        测试设计
            测试计划
                需求评审
                设计评审
            测试脚本开发
                单元评审
                集成评审
        测试执行
            功能测试
                单元测试
                集成测试
                确认测试
                系统测试
                验收测试
                安装测试
            测试结果和分析报告
                系统测试
                验收评审
        测试方法
            黑盒测试
            白盒测试
    软件模块                          !!!
        耦合类型
            内容耦合
                模块间互相修改 
            公共耦合
                模块引用共同全局变量
            外部耦合
                模块访问同一全局变量
            控制耦合
                模块间传递信号控制
            标记耦合
                模块间传内部结构参数
            数据耦合
                模块间传参
            非直接耦合
                无明显信息传递
        设计原则
            尽量用最低的耦合度
            尽量数据耦合
            少用控制耦合
            限制公共耦合
            坚决避免内容耦合

10 软件安全性测试
    软件安全性测试概念
        确定软件的安全特性实现是否与预期设计一致的过程
    软件两种测试区别
        功能性
            验证正确输出
            不正确的输出是缺陷
            非安全性缺陷是违反规约
        安全性
            验证没有不正确输出
            安全性缺陷
            安全性缺陷是副作用引起
    安全性测试
        分类                                  !!!
            安全功能测试
                测试是否符合安全需求
            安全漏洞测试
                攻击者角度测试
        主要方法                             !!!
            白盒灰盒测试
                文档源代码二进制代码进行静态审核
                运行系统动态检测
            黑盒测试功能验证
                软件安全功能进行测试
            漏洞扫描
                借助扫描机器扫描漏洞
                主机漏洞网络漏洞
            模拟攻击
                从攻击者角度进行测试
    模糊测试                                    !!!
        暴力进行测试
        fuzzer安全测试, 分成文件网络内存三类型
    故障树
        将系统故障原因按照总体到部分的树状分析
        以最有危害的事件作为根
        然后用与或方式列出中间时间以及底事件
        能引起最有危害的事件的底事件集合且去掉任一底事件都无法触发最有危害事件的底事件集合的集合是最小割集
        也就是换成或(与())结构

11 白盒测试
    白盒测试含义                          !!!!!
        结构测试或逻辑驱动测试
        根据程序控制结构设计测试用例 
        仍可能存在错误
    覆盖                                        !!!!!
        语句覆盖
            每个可执行语句至少执行一次
        判定覆盖
            每个判定至少获得一次真与假
        条件覆盖
            每个判定包含的每个条件都至少获得一次真与假
        判定/条件覆盖
            同时满足判定和条件覆盖
        组合覆盖
            每个判定所有条件组合都覆盖
        路径覆盖
            覆盖所有可能路径
    控制流测试
        独立路径
            至少沿一条新边开始的路径
        路径数计算
            写成基本的与或式然后相乘相加即可
        路径爆炸                               !!!
            对于过多条件判断
    循环测试
        简单循环
            跳过循环
            循环一次
            循环两次
            循环m次
            循环n-1, n, n+1次
        嵌套循环
            内层循环测试
            外层循环测试, 取一些典型值即可
        串接循环
            循环相互独立, 分别测试即可
        非结构循环
            无法测试, 结构化后再测试
    Z路径覆盖
        简化循环结构, 只考虑是否执行
        相当于变成判断句
    单元测试                                    !!!
        概念
            对已实现的软件最小单元进行测试, 以保证构成软件系统的各个单元的质量
        内容
            模块接口
            局部数据结构
            重要执行路径
            边界条件
            错误处理
    驱动程序                                       !!!
        对底层或子模块进行测试时编制的调用被测模块程序
    桩程序                                        !!!
        对顶层模块测试时抽象出来替代的下层模块的程序

12 黑盒测试
    黑盒测试含义                             !!!!!
        从用户观点出发的测试
        检查程序功能是否正常
        测试人机交互, 数据结构, 外部访问是否无误
        测试程序初始化和终止是否正常
    等价类划分方法                          !!!!!
        对无法穷举的测试合理分类 
        划分方式
            数据是否有效
                有效等价类
                无效等价类
            缺陷相关性分类
                弱等价类测试
                    单缺陷假设, 不考虑无效数据
                强等价类测试
                    多缺陷假设, 不考虑无效数据
            是否测试无效数据
                标准等价类测试
                    不考虑无效数据
                健壮等价类测试
                    考虑无效数据
    边界值分析法                                      !!!!!
        对边界值以及边界值濒临数据进行测试
    判定表
        分析和表达多逻辑条件下执行不同操作的工具
        条件桩, 动作桩, 条件项, 动作项
        驱动分析肥肥
            确定规则个数
            列出所有条件桩和动作桩
            填入条件项和动作项
            等到初始判定表
            简化合并
        规则合并

13 网络与协议测试
    网络测试和软件测试异同                            !!!!!
        都是通过IO观察系统, 子系统或模块行为过程
        软件测试很多方法思想可以移植到网络测试
        但是网络测试以协议规范为基础
    测试分类
        是否干预被测对象
            被动测试
            主动测试
        被测对象数量
            单品测试
            集成测试
        被测对象属性
            端系统测试
                单层侧式
                多层测试
            中间系统/中继系统/通信子网测试
                单端口测试
                双端口测试
                多端口测试
            被测程序是否运行
                静态测试
                动态测试
            测试目的
                一致性测试/符合标准程度测试
                功能测试
                    积极/探查测试
                    消极/损伤测试
                非功能测试
                    配置安装测试
                    兼容性互操作性测试
                    文档帮助测试
                    故障诊断测试
                    错误恢复测试
                    性能测试
                    压力测试
                    可靠性测试
                测试阶段
                    alpha内测
                    beta公测
                    lambda发行
                测试方法
                    黑盒测试
                    白盒测试 
                    灰盒测试
                测试执行方法
                    手工测试
                    自动化测试
    灰盒测试
        介于白盒黑盒之间, 关注输入正确性也关注内部表现, 但不像白盒一样细致, 也不像黑盒一样完全不清楚内部结构
    回归测试                                       !!!
        修改旧代码后重新测试防止引入新错误
        需要兼顾效率和有效性
    协议测试内容                                     !!!
        一致性测试
            协议是否符合描述
        性能测试
            检验协议实体和系统的性能指标
        互操作测试
            同一协议不同版本, 同一类协议的互通互联能力
        鲁棒性测试
            检测恶劣环境下健壮性, 即抗干扰能力